1. modifier搞懂, 重构		√
2. scriptObject -> 读数据,代码配置
    linq相关操作移到底层
    remove弄好
    sprite不放在ability和effect中, 直接通过id读表
2. 迁移到僵尸项目上, 和现有代码整合
3. 根据需求修改代码 实现一个demo 



哪些在编辑器里配置, 哪些在excel里配置?
-------------------------------------------------------------------------
****** baseValue 和 currentValue 之间清晰的界定? 分别代表什么?


能力系统:
	1. 管理-AttributeSet(属性集)	√       +- 修改 计算...

	2. 管理-施放中的技能		√            是否可施放, 尝试释放
	3. 管理-穿上的装备
	4. 管理-召唤出的宠物
		......

	5. 管理-激活中的效果	-> 修改属性集, 修改状态		√       

---------------------------------------------------------------
技能:    (一系列的时序过程, 技能本身不会对数值造成任何影响, 起作用的是效果)

	1. 什么时候**生成实体**(子弹,怪物,魔法阵), 生成规则位置, 目标, 轨迹等)  √
					-> 之后逻辑由生成的实体自己负责
	2. 什么时候给目标**附加效果**(掉血, 硬直, 每秒恢复)		√
装备:
	2. 附加[效果]

---------------------------------------------------------------

*** 玩家,敌人宠物,子弹,魔法阵: 有自己的逻辑,自己的脚本      分别分类实现

---------------------------------------------------------------
*** 效果:   buff/debuff/无限/单次                   实现一次
	1. 配置: 计时+周期+叠加				√
	2. 修改器: 修改数值				√
	3. 修改器: 修改状态 
	4. 对应的画面表现(粒子特效)			√
	5. 生成实体 (每隔几秒生成一个暴风雪)
----------------------------------------------------------------












技能释放阶段 一系列的时序操作
	1. 释放到目标身上的技能 -> 参数: 目标abilitySystem
	2. 路径技能             -> 参数: 起始点, 方向等 
	2. 释放到指定位置	-> 参数: 目标点坐标

1. 动画系统
2. 粒子系统
3. 实体逻辑



logic
--------------------------------------------------------------------
1. apply effect
    参数: effect的id

2. 追踪武器
    参数: 子弹id, 发射位置偏移量, 击中之后应用的effect id

3. 直线发射的武器
    参数: 子弹id, 发射位置, 发射方向, 速度, 击中之后应用的effect id

4. 召唤
    参数: 召唤兽id, 生成位置, 持续时间...